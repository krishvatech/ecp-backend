"""
API views for realtime token issuance.

This module contains Django REST Framework views that issue
CPaaS tokens for authenticated users to join or broadcast to a
real‑time streaming session associated with an event.  The endpoint
validates that the requesting user belongs to the same organization as
the event and, for publisher roles, that they have the appropriate
permissions (either as the event creator or organization owner).

The token itself is generated by :class:`realtime.services.AgoraService`.
"""
from __future__ import annotations

from rest_framework import permissions, status
from rest_framework.exceptions import PermissionDenied
from rest_framework.response import Response
from rest_framework.views import APIView
from django.shortcuts import get_object_or_404

from events.models import Event
from realtime.services import AgoraService

from drf_spectacular.utils import (
    extend_schema,
    OpenApiParameter,
    OpenApiTypes,
)
from .serializers import EventTokenRequestSerializer

class EventStreamTokenView(APIView):
    """Issue a short‑lived streaming token for a given event.

    Clients should ``POST`` to this endpoint with the event's primary
    key in the URL.  An optional ``role`` may be supplied in the
    request body or query string with values ``"publisher"`` (for
    speakers/broadcasters) or ``"audience"`` (for viewers).  The
    default role is ``"audience"``.

    Only authenticated users who are members of the event's
    organization may obtain a token.  To request a publisher token
    (i.e. the ability to broadcast), the user must either own the
    organization or be the creator of the event.  Otherwise, they
    receive an audience token.
    """

    permission_classes = [permissions.IsAuthenticated]
    @extend_schema(
        summary="Issue a short-lived streaming token for an event",
        description=(
            'Pass {"role":"publisher"} for broadcaster, otherwise "audience" is used. '
            'You may also pass role via query string: ?role=publisher'
        ),
        request=EventTokenRequestSerializer,  
        parameters=[
            OpenApiParameter(
                name="role",
                type=OpenApiTypes.STR,
                location=OpenApiParameter.QUERY,
                required=False,
                description='Role for the token: "audience" (default) or "publisher".',
            ),
        ],
        responses={
            200: {
                "type": "object",
                "properties": {
                    "token": {"type": "string"},
                    "expires_at": {"type": "string", "format": "date-time"},
                    "channel": {"type": "string"},
                    "app_id": {"type": "string"},
                    "role": {"type": "string", "enum": ["audience", "publisher"]},
                },
            },
            400: {"type": "object"},
            403: {"type": "object"},
            404: {"type": "object"},
        },
    )
    def post(self, request, event_id: int) -> Response:
        event = get_object_or_404(Event, pk=event_id)

        user = request.user
        if not event.organization.members.filter(pk=user.pk).exists():
            raise PermissionDenied("You do not have access to this event.")

        # accept both JSON body and query param
        role = (request.data.get("role") or request.query_params.get("role") or "audience").lower()

        if role not in {"publisher", "audience"}:
            return Response(
                {"error": "invalid_role", "detail": "Role must be 'publisher' or 'audience'."},
                status=status.HTTP_400_BAD_REQUEST,
            )

        if role == "publisher":
            if not (event.created_by_id == user.id or event.organization.owner_id == user.id):
                raise PermissionDenied("Only the event creator or organization owner may broadcast.")

        svc = AgoraService()
        token, expires_at = svc.generate_token(event.slug, user.id, role=role)

        # ensure ISO8601 with Z (UTC)
        expires_iso = (
            expires_at.replace(tzinfo=None).isoformat(timespec="seconds") + "Z"
            if hasattr(expires_at, "tzinfo")
            else str(expires_at)
        )

        return Response(
            {
                "token": token,
                "expires_at": expires_iso,
                "channel": event.slug,
                "app_id": svc.app_id,
                "role": role,
            },
            status=status.HTTP_200_OK,
        )